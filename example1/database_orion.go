// Code generated by orion. DO NOT EDIT.

package example

import "github.com/lovromazgon/orion"

type DatabaseWithContract interface {
	Database
	contract() *contract
}

func NewDatabaseWithContract(db Database, handler orion.BreachHandler) DatabaseWithContract {
	return &databaseWithContract{
		db: db,
		c:  contractAdapter{newContract(db)},
		o:  orion.New(handler),
	}
}

type databaseWithContract struct {
	db Database
	c  contractAdapter
	o  *orion.O
}

func (d databaseWithContract) contract() *contract {
	return d.c.contract
}

func (d databaseWithContract) Get(key string) (string, error) {
	b := d.c.BeforeGet(key)
	if b != orion.NoBreach {
		d.o.AddBreach(b)
	}
	defer func() {
		b := d.c.AfterGet(key)
		if b != orion.NoBreach {
			d.o.AddBreach(b)
		}
	}()
	return d.db.Get(key)
}

func (d databaseWithContract) Set(key, value string) error {
	b := d.c.BeforeSet(key, value)
	if b != orion.NoBreach {
		d.o.AddBreach(b)
	}
	defer func() {
		b := d.c.AfterSet(key, value)
		if b != orion.NoBreach {
			d.o.AddBreach(b)
		}
	}()
	return d.db.Set(key, value)
}

func (d databaseWithContract) Delete(key string) error {
	b := d.c.BeforeDelete(key)
	if b != orion.NoBreach {
		d.o.AddBreach(b)
	}
	defer func() {
		b := d.c.AfterDelete(key)
		if b != orion.NoBreach {
			d.o.AddBreach(b)
		}
	}()
	return d.db.Delete(key)
}

type contractAdapter struct {
	*contract
}

func (c contractAdapter) BeforeGet(key string) orion.Breach {
	cc, ok := any(c.contract).(interface{ BeforeGet(string) orion.Breach })
	if ok {
		return cc.BeforeGet(key)
	}
	return orion.NoBreach
}
func (c contractAdapter) AfterGet(key string) orion.Breach {
	cc, ok := any(c.contract).(interface{ AfterGet(string) orion.Breach })
	if ok {
		return cc.AfterGet(key)
	}
	return orion.NoBreach
}
func (c contractAdapter) BeforeSet(key, value string) orion.Breach {
	cc, ok := any(c.contract).(interface{ BeforeSet(string, string) orion.Breach })
	if ok {
		return cc.BeforeSet(key, value)
	}
	return orion.NoBreach
}
func (c contractAdapter) AfterSet(key, value string) orion.Breach {
	cc, ok := any(c.contract).(interface{ AfterSet(string, string) orion.Breach })
	if ok {
		return cc.AfterSet(key, value)
	}
	return orion.NoBreach
}
func (c contractAdapter) BeforeDelete(key string) orion.Breach {
	cc, ok := any(c.contract).(interface{ BeforeDelete(string) orion.Breach })
	if ok {
		return cc.BeforeDelete(key)
	}
	return orion.NoBreach
}
func (c contractAdapter) AfterDelete(key string) orion.Breach {
	cc, ok := any(c.contract).(interface{ AfterDelete(string) orion.Breach })
	if ok {
		return cc.AfterDelete(key)
	}
	return orion.NoBreach
}
